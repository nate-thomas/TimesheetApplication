// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TimeSheetApplication.Data;

namespace TimeSheetApplication.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180305032346_appuser added")]
    partial class appuseradded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TimeSheetApplication.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TimeSheetApplication.Models.TimeSheetSystem.AuthorizationCodes", b =>
                {
                    b.Property<string>("AuthCode")
                        .ValueGeneratedOnAdd();

                    b.HasKey("AuthCode");

                    b.ToTable("AuthorizationCodes");
                });

            modelBuilder.Entity("TimeSheetApplication.Models.TimeSheetSystem.Employees", b =>
                {
                    b.Property<string>("EmployeeNumber")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthCode");

                    b.Property<string>("EmployeeIntials");

                    b.Property<string>("FirstName");

                    b.Property<string>("Grade");

                    b.Property<string>("IdentityId");

                    b.Property<string>("LastName");

                    b.Property<string>("SupervisorEmployeeNumber");

                    b.Property<string>("SupervisorNumber");

                    b.HasKey("EmployeeNumber");

                    b.HasIndex("AuthCode");

                    b.HasIndex("Grade");

                    b.HasIndex("IdentityId");

                    b.HasIndex("SupervisorEmployeeNumber");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("TimeSheetApplication.Models.TimeSheetSystem.LaborGrades", b =>
                {
                    b.Property<string>("Grade")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("PayAmount");

                    b.HasKey("Grade");

                    b.ToTable("LaborGrades");
                });

            modelBuilder.Entity("TimeSheetApplication.Models.TimeSheetSystem.Projects", b =>
                {
                    b.Property<string>("ProjectNumber")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("ProjectNumber");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TimeSheetApplication.Models.TimeSheetSystem.TimesheetRows", b =>
                {
                    b.Property<string>("EmployeeNumber");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("ProjectNumber");

                    b.Property<string>("WorkPackageNumber");

                    b.Property<double>("Friday");

                    b.Property<double>("Monday");

                    b.Property<double>("Saturday");

                    b.Property<double>("Sunday");

                    b.Property<double>("Thursday");

                    b.Property<string>("TimesheetRowsId");

                    b.Property<double>("Tuesday");

                    b.Property<double>("Wednesday");

                    b.HasKey("EmployeeNumber", "EndDate", "ProjectNumber", "WorkPackageNumber");

                    b.HasIndex("ProjectNumber", "WorkPackageNumber");

                    b.ToTable("TimesheetRows");
                });

            modelBuilder.Entity("TimeSheetApplication.Models.TimeSheetSystem.Timesheets", b =>
                {
                    b.Property<string>("EmployeeNumber");

                    b.Property<DateTime>("EndDate");

                    b.HasKey("EmployeeNumber", "EndDate");

                    b.ToTable("Timesheets");
                });

            modelBuilder.Entity("TimeSheetApplication.Models.TimeSheetSystem.WorkPackages", b =>
                {
                    b.Property<string>("ProjectNumber");

                    b.Property<string>("WorkPackageNumber");

                    b.Property<string>("Description");

                    b.HasKey("ProjectNumber", "WorkPackageNumber");

                    b.ToTable("WorkPackages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TimeSheetApplication.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TimeSheetApplication.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TimeSheetApplication.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TimeSheetApplication.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TimeSheetApplication.Models.TimeSheetSystem.Employees", b =>
                {
                    b.HasOne("TimeSheetApplication.Models.TimeSheetSystem.AuthorizationCodes", "AuthorizationCode")
                        .WithMany("Employees")
                        .HasForeignKey("AuthCode");

                    b.HasOne("TimeSheetApplication.Models.TimeSheetSystem.LaborGrades", "LaborGrade")
                        .WithMany("Employees")
                        .HasForeignKey("Grade");

                    b.HasOne("TimeSheetApplication.Models.AppUser", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityId");

                    b.HasOne("TimeSheetApplication.Models.TimeSheetSystem.Employees", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorEmployeeNumber");
                });

            modelBuilder.Entity("TimeSheetApplication.Models.TimeSheetSystem.TimesheetRows", b =>
                {
                    b.HasOne("TimeSheetApplication.Models.TimeSheetSystem.Timesheets", "Timesheet")
                        .WithMany("TimesheetRows")
                        .HasForeignKey("EmployeeNumber", "EndDate")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TimeSheetApplication.Models.TimeSheetSystem.WorkPackages", "WorkPackage")
                        .WithMany("TimesheetRows")
                        .HasForeignKey("ProjectNumber", "WorkPackageNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TimeSheetApplication.Models.TimeSheetSystem.Timesheets", b =>
                {
                    b.HasOne("TimeSheetApplication.Models.TimeSheetSystem.Employees", "Employee")
                        .WithMany("Timesheets")
                        .HasForeignKey("EmployeeNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TimeSheetApplication.Models.TimeSheetSystem.WorkPackages", b =>
                {
                    b.HasOne("TimeSheetApplication.Models.TimeSheetSystem.Projects", "Project")
                        .WithMany("WorkPackages")
                        .HasForeignKey("ProjectNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
